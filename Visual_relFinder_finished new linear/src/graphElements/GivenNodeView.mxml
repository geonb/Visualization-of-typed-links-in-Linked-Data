<?xml version="1.0" encoding="utf-8"?>

<!-- 
Copyright (C) 2009 Philipp Heim, Sebastian Hellmann, Jens Lehmann, Steffen Lohmann and Timo Stegemann

This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program; if not, see <http://www.gnu.org/licenses/>.	
-->

<mx:Canvas 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:flexlib="http://code.google.com/p/flexlib/" 
	xmlns:ext="classes.extenders.*"
	xmlns:nimer="com.mikenimer.components.datagrid.*"
	xmlns:local="*"
	creationComplete="setup()"
	backgroundAlpha="0.0"

	width="230" height="25" toolTip="{data.element.label}"
	verticalScrollPolicy="off" horizontalScrollPolicy="off" click="{selectedPath(), data.hasBeenClicked()}"  borderStyle="none" paddingBottom="2" paddingTop="2" paddingLeft="2" paddingRight="2" cornerRadius="0">
		
		<!-- 
			borderColor="{getColor(app().currentElement)}"
			filters="{calcFilters(data.colorRings.length)}"
			borderThickness="{getBorderThickness(app().currentElement)}"
		-->
		
		<mx:HBox id="content" height="100%" width="100%" horizontalGap="0" verticalAlign="top"
				paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0">
			<!-- <mx:TextArea id="textA" text="{data.element.label}" width="{120 - 26}"></mx:TextArea>-->
			<local:LoadingAnimation id="la" circleRadius="7" dotSize="2" numberOfDots="8" useHandCursor="true" buttonMode="true" mouseChildren="false"/>
		<mx:HBox id="hNode" backgroundAlpha="1.0" backgroundColor="{getBackgroundColor(app().selectedElement)}">	
		<mx:Label  paddingTop="0" id="nodeLabel" color="0xffffff"  text="{data.element.rdfLabel}" fontWeight="bold" fontSize="12" useHandCursor="true" buttonMode="true" mouseChildren="false"/>
		<!--<mx:Button id="pinButton" width="10" height="10" styleName="unpinBtn" />-->
		</mx:HBox>
		<mx:HBox paddingLeft="35" paddingRight="5" paddingTop="0" backgroundAlpha="0.0">
		<mx:Button id="arrow" styleName="arrowBtn" click="{toggle(0)}" width="20" height="20"></mx:Button>
		</mx:HBox>
		<mx:ComboBox id="langCombo" visible="false" dataProvider="{Languages.getInstance().asDataProvider}" />
			<!--<mx:Label id="resourceLink" truncateToFit="true" width="230" htmlText="{data.element.uriLink}" paddingLeft="-50" fontSize="12" toolTip="{data.element.resourceURI}" selectable="true" link="openWebsite(event);"  />-->
		</mx:HBox>
			
			
		<mx:VBox id="infoa" backgroundAlpha="1.0" top="32" paddingBottom="2" paddingTop="2" paddingRight="2" paddingLeft="0" width="100%" height="100%" >
		<!-- toggle on click></!-->
		<local:ImageView id="imagea" width="150" height="150" image_path="{data.element.imageURL}" />
		<mx:TextArea  id="texta" wordWrap="true" editable="false" borderStyle="none" fontSize="13" top="32" height="460"  width="230"
				visible="{data.element.abstract != 'no abstract available'}"
				text="{data.element.abstract}" verticalScrollPolicy="on" horizontalScrollPolicy="off" />
			<!--mx:Spacer width="12"/> 
			<mx:Button id="closeButton" width="10" height="10" styleName="closeBtn" />-->
		</mx:VBox>
	

	
	<mx:Script>
		<![CDATA[
			import flash.utils.Timer;
			import graphElements.GivenNode;
			import mx.collections.ArrayCollection;
			import mx.containers.Canvas;
			import mx.core.Application;
			import mx.events.DragEvent;
			import global.Languages;
			import mx.core.UIComponent;
			import graphElements.model.Graphmodel;
			
			private var showLoadingAnimation:Boolean = true;
			public var arr:Array = new Array();
			public var isPinned:Boolean = false;
			
			private var _data:GivenNode;
			[Bindable(event="dataChange")]
			override public function get data():Object { 
				return super.data;
			}
			
			override public function set data(value:Object):void 
			{
				super.data = value;
				
				value.addEventListener("rdfLabelChange", rdfLabelChangeHandler);
				value.addEventListener("isLoadingChange", elementChangeHandler);
				value.addEventListener("elementChange", elementChangeHandler);
				
				dispatchEvent(new Event("dataChange"));
			}
			private function elementChangeHandler(event:Event):void {
				
				if (showLoadingAnimation) {
					if (_data == null || _data.element == null) {
						if (data.element.isLoading) {
							la.startRotation();
						}else {
							la.stopRotation();
						}
					}
					setLabelWidth();
				}
			}
			private function openWebsite(evt:TextEvent):void {
				if (evt.text..search("http://") == 0) {
					var newLink:URLRequest = new URLRequest(evt.text);
					navigateToURL(newLink,"_blank");
				}
			}
			private function setLabelWidth():void {
				nodeLabel.width = 122;
			}
			
			private function rdfLabelChangeHandler(event:Event):void {
			}
			private function selectedLanguageChangedHandler(event:Event):void {
				langCombo.selectedIndex = Languages.getInstance().selectedLanguageIndex;
			}
			private function changeLang():void {
				Languages.getInstance().selectedLanguage = langCombo.selectedItem.toString();
			}
			public function setup():void {
				//trace("setup");
				addListeners();
				this.parent.setChildIndex(this, 1);
				elementChangeHandler(null);
				//trace("ListView has been build");
				this.x = 10;
				mod = 0;
				data.pin();
			}
			public function addListeners():void {
				hNode.addEventListener(MouseEvent.CLICK, panelClickHandler);
				Languages.getInstance().addEventListener("eventSelectedLanguageChanged", selectedLanguageChangedHandler);
				Languages.getInstance().addEventListener("eventLangsChanged", selectedLanguageChangedHandler);
				//this.pTitleBar.addEventListener(MouseEvent.DOUBLE_CLICK, titleBarDoubleClickHandler);
				
				/*var timer:Timer = new Timer(4000, 1);
				timer.addEventListener(TimerEvent.TIMER_COMPLETE, this.timerCompleteHandler);
				timer.start();
				*/
				//hNode.addEventListener(MouseEvent.MOUSE_DOWN, titleBarDownHandler);
				//closeButton.addEventListener(MouseEvent.CLICK, closeClickHandler);
				//pinButton.addEventListener(MouseEvent.CLICK, pinClickHandler);
			}
			
			/*public function timerCompleteHandler(event:Event):void {
				if (!this.isPinned) {	//if the window is not allready pinned
					this.pinClickHandler(null);
				}
			}*/
			
			private function app(): Main {
				return Application.application as Main;
			}
			
			/*public function pinClickHandler(event:MouseEvent):void {
				if (this.pinButton.styleName == "pinBtn") {
					data.pin();
					pinButton.styleName = "unpinBtn";
					isPinned = true;
				}else {
					data.unpin();
					pinButton.styleName = "pinBtn";
					isPinned = false;
				}
			}*/
			private var mod:int = 0;
			private var crt1:int = 0;
			public function toggle(tog:int):void {
				
				this.panelFocusCheckHandler();
				if (data.element.abstract != "no abstract available") {
					var limiter:String = data.element.abstract;
					limiter.split("&ndash;").join("&#8211;");
					if (mod == 0 && tog != 1) {
						this.parent.setChildIndex(this, this.parent.numChildren - 1);
						data.pin();
						this.width = 230;
						this.height = imagea.height + texta.height + 30;
						mod = 1;
					} else {
						this.parent.setChildIndex(this, this.parent.numChildren - 2);
						data.pin();
						this.width = 230;
						this.height = 25;
						mod = 0;
					}
				}
			}
			public function panelClickHandler(event:MouseEvent):void {
				/* alles schwachsinn! */
				hNode.removeEventListener(MouseEvent.MOUSE_MOVE, titleBarMoveHandler);	
				this.parent.setChildIndex(this, this.parent.numChildren - 1);
				this.panelFocusCheckHandler();
							
			}
			private var crt2:int = 0;
			public function titleBarDownHandler(event:MouseEvent):void {
				//hNode.addEventListener(MouseEvent.MOUSE_MOVE, titleBarMoveHandler);	
				this.parent.setChildIndex(this, this.parent.numChildren - 2);
				data.pin();
				this.width = 230;
				this.height = 25;
				mod = 0;
			}
				
			public function titleBarMoveHandler(event:MouseEvent):void {
				if (this.width < screen.width) {
					hNode.addEventListener(MouseEvent.MOUSE_UP, titleBarDragDropHandler);
					hNode.addEventListener(DragEvent.DRAG_DROP,titleBarDragDropHandler);
					this.parent.setChildIndex(this, this.parent.numChildren - 1);
					this.panelFocusCheckHandler();
					this.alpha = 0.5;
					this.startDrag(false, new Rectangle(0, 0, screen.width - this.width, screen.height - this.height));
					
				}
				/**
				 * added by Philipp Heim
				 */
				event.stopImmediatePropagation();
				data.pin();
			}
			
			public function titleBarDragDropHandler(event:MouseEvent):void {
				hNode.removeEventListener(MouseEvent.MOUSE_MOVE, titleBarMoveHandler);
				this.alpha = 1.0;
				data.pin();
				this.stopDrag();
			}
			
			public function panelFocusCheckHandler():void {
				/*for (var i:int = 0; i < this.parent.numChildren; i++) {
					var child:UIComponent = UIComponent(this.parent.getChildAt(i));
					if (this.parent.getChildIndex(child) < this.parent.numChildren - 1) {
						child.setStyle("headerColors", [0xe8e8e8, 0xc8c8c8]);
						child.setStyle("borderColor", 0xc8c8c8);
					} else if (this.parent.getChildIndex(child) == this.parent.numChildren - 1) {
						child.setStyle("headerColors", [0xc8c8c8, 0xa8a8a8]);
						child.setStyle("borderColor", 0xa8a8a8);
					}
				}*/
			}
			
			public function closeClickHandler(event:MouseEvent):void {
				hNode.removeEventListener(MouseEvent.CLICK, panelClickHandler);
				//this.parent.removeChild(this);
				//app().removeElementItem(this.data as ElementItem);
			}
			private function clearPaths():void {
				for (var ir:int = 0; ir <  Graphmodel.getInstance().relations.toArray().length; ir++) {
					var r:Relation = Graphmodel.getInstance().relations.toArray()[ir];
						var p:Path = r.paths[0];
						p.isHighlighted = false;
				}
			}
			private function selectedPath():void {
				clearPaths();
				for each(var r:Relation in data.element.relations) {
					for each(var p:Path in r.paths) {
						p.isHighlighted = true;
					}
					
				}
			}
			private function trimHashSign(uri:String):String {
				return uri.substr(uri.lastIndexOf("#") + 1)
			}
			
			private function getBorderThickness(selectedElement:Element): int {
				if (selectedElement != data.element) {
					return 2;
				}else {
					return 3;
				}
			}
			
			private function calcFilters(_length:int): Array {
				var a:Array = new Array();
				var radius:int = 5;
				var alpha:Number = 1.0;
				for each(var color:uint in data.colorRings) {
					a.push(new GlowFilter(color, alpha, radius, radius, 15, 2));
				}
				return a;
			}
			
			private function getBackgroundColor(selectedElement:Element):int {
				//trace("get BColor " + selectedC.id);
				//trace("test" + data.concept);
				for each(var r:Relation in data.element.relations) {
					for each(var p:Path in r.paths) {
						if (p.isHighlighted == true) {
							return 0xff0000;
						}
					}
					
				}
				return 0x888888;
			}
			
		]]>
	</mx:Script>	
	
</mx:Canvas>